
NOTES
-----

[20120903] - hal clark.
- Some library-candidates are segregated due to various reasons related to their portability.
  For instance, some convenient URI routines are included in the 'YgorURITools' routines. As of 
  the time of writing, these routine rely on an external (and somewhat flaky) library called
  'htmlcxx.'

  If direct inclusion of the code is feasible and deemed safe with regard to the continual 
  upkeep of the external codebase, sch libraries may be moved into the main utilities
  directory. Please - though - be ruthless when dealing with packages which break compilation
  of the library.

[20130528] - hal clark.
- These libraries continue to be used in a large number of (personal) projects I touch. I have
  therefore become increasingly scrutinous of the code quality. Although this library is 
  designed to facilitate sharing code between disparate projects via a common codebase, it
  imposes contraints on portability due to limitations of included libraries, assumptions about
  the environment (e.g. memory), and increases difficulties in cross compiling.

  Emphasis has not previously been on library size (source nor binary) nor consistency, but I
  intend to slowly rework/adapt/fix code which could easily be altered to work toward this end.
  
  Most work continues to occur in the math files (which are now enormous). I intend to split
  these files into more easily digestable parts when the time is right. Further improvements
  are planned to address missing functionality in:
  - networking
  - threading
  - regex (and migration to std::regex when possible)
  - timing
  - buffering/streaming

  which will primarily occur via:
  - Project - Operator
  - Project - DICOMautomaton
  - Project - Calories
  - Project - PolyCAS
  - Project - Audio Flavour Matcher
  - Project - Wireless

  Notably, string functions are not currently being added. I have *no* idea what to do about 
  the environment-dependent functions in YgorEnvironment. Currently shell scripts are used (and
  work well) but are brittle and in poor taste. The alternative (inclusion via libraries or
  external sources) increases compatability problems. For now, I'm content to keep things as
  they are (i.e. weak external dependencies - as in: run-time external dependencies).

[20130714] - hal clark.
- Lately, library development has mostly focused on minor additions, refactoring, and addition 
  of extra error handling for easier use. I expect development to pick up a little after the 
  thesis. Specifically, I'd like to focus on code quality. It mostly seems to work (I don't 
  often encounter bugs), but there are major irritants like non-standard error 
  handling/signalling, naming conventions all over the place, and huge files which should be 
  broken up into smaller pieces (or several books :) ).

  One bonafide bug is an occasional 100% cpu in a child thread in a Project - Operator server.
  It doesn't stop the server from working correctly, but it endlessly keeps the fan spun up.
  I haven't had a chance to investigate it yet, but a quick strace indicated epoll() problems.
  This is good because I want to get rid of it anyways. Something more portable would be best.
  FreeBSD support is (I think) being held up by missing epoll.

  Something I'd (really!) like to do is work with coroutines. Another thing is better logging
  support - something to complement FUNCERR, FUNCWARN, FUNCINFO with a single call. It ought
  to also emit duplicate messages with a "...message here... - Received N times" or something
  like ffmpeg does. The bigger goal is to reduce number of lines of code required to signal
  errors and warnings for easier signalling. Thesis work first, though.

